<?php

function react_components_theme($existing, $type, $theme, $path) {
  $module_path = \Drupal::service('extension.list.module')->getPath('react_components');

  return [
    'react_block' => [
      'render element' => 'content',
      'template' => 'react-block', // Maps to your-custom-block.html.twig
      'path' => $module_path . '/templates',
      'variables' => [
        'uuid' => '',
      ],
    ],
    'paragraph__react_component' => [
      'render element' => 'elements',
      'path' => $module_path . '/templates',
      'template' => 'paragraph--react-component',
    ],
  ];
}

function react_components_preprocess_paragraph__react_component(array &$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $uuid = $paragraph->uuid();

  $settingsKey = 'rc-paragraph-' . $uuid;

  $variables['#attached']['drupalSettings']['reactComponents'][$settingsKey] = [
    'paragraph_uuid' => $uuid,
    'componentType' => $paragraph->get('field_component_type')->value,
    'title' => $paragraph->get('field_component_title')->value
  ];

  $variables['uuid'] = $uuid;

  $variables['#attached']['library'][] = 'react_components/react-components-lib';
}


// let's give the block a custom id based on the title
function react_components_preprocess_block(&$variables) {
  $plugin_id = $variables['elements']['#plugin_id'];

  if ($plugin_id == 'react_block') {

    if (!empty($variables['configuration']['component_title'])) {
      $title = $variables['configuration']['component_title'];
      $id = strtolower($title);
      $id = trim($id);
      $id = preg_replace('/[^a-z0-9]+/', '-', $id);
      $id = 'rcb-' . $id;
      $variables['attributes']['id']  = $id;
    }

    // send the html of the menus as variables to this component
    // first, use the simplest way of loading a generic menu correctlly, and load 'main'
    if ($variables['configuration']['component_type'] == "slideout_menu") {
      $menu_name = 'main';

      $menu_tree = \Drupal::menuTree();

      // $menu_storage = \Drupal::entityTypeManager()->getStorage('menu');
      // $menu = $menu_storage->load($menu_name);

      $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
      $tree = $menu_tree->load($menu_name, $parameters);

      $manipulators = [
        ['callable' => 'menu.default_tree_manipulators:checkAccess'],
        ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
      ];

      $tree = $menu_tree->transform($tree, $manipulators);

      // Build render array
      $menu_build = $menu_tree->build($tree);
      $menu_build['#theme'] = 'menu__mobile_main_slideout';
      
      // Render to HTML
      $renderer = \Drupal::service('renderer');
      $menu_html = $renderer->render($menu_build);

      // Ok, I aslo wanna send the system brandings block to the frontend
      $site_branding_block = \Drupal::entityTypeManager()
        ->getStorage('block')
        ->load('weightvest_running_site_branding');
      
      $site_branding_block_content = \Drupal::entityTypeManager()
        ->getViewBuilder('block')
        ->view($site_branding_block);

      $branding_html = $renderer->render($site_branding_block_content);

      // the build() function gives blocks a uuid .. 
      $uuid = $variables['elements']['content']['react_block']['#uuid'];
      $settingsKey = 'rc-block-' . $uuid;

      // ok menu html lookd good. Now to load it to settings.. 
      $moreSettings = [
        "blockType" => "slideout_menu",
        "menuHtml" =>  $menu_html,
        "brandingHtml" => $branding_html
      ];

      $finalSettings = array_merge($variables['content']['react_block']['#attached']['drupalSettings']['reactComponents'][$settingsKey], $moreSettings);

      $variables['content']['react_block']['#attached']['drupalSettings']['reactComponents'][$settingsKey] = $finalSettings;

      // alright the rest should be taken care of on the frontend
    } else if ($variables['configuration']['component_type'] == "fitness_metrics_page_block") {
      // get the fields from the node

      /**
       * field_40_full_circuit_weight Number (decimal)
       * field_40_goblet_squat_weight Number (decimal)
       * field_40_lunge_weight Number (decimal)
       * field_40_pushup_weight Number (decimal)
       * field_number_of_pullups Number (integer)
       */
      $node = \Drupal::routeMatch()->getParameter('node');

      if ($node && $node->getType() == 'fitness_metrics') {

        $moreSettings = [];

        $field_mappings = [
          'field_40_full_circuit_weight' => 'full_circuit_weight',
          'field_40_goblet_squat_weight' => 'goblet_squat_weight', 
          'field_40_lunge_weight' => 'lunge_weight',
          'field_40_pushup_weight' => 'pushup_weight',
          'field_number_of_pullups' => 'number_of_pullups'
        ];

        $decimal_fields = [
          'field_40_full_circuit_weight',
          'field_40_goblet_squat_weight',
          'field_40_lunge_weight', 
          'field_40_pushup_weight'
        ];

        foreach ($field_mappings as $field_name => $variable_name) {
          if ($node->hasField($field_name) && !$node->get($field_name)->isEmpty()) {
            $value = $node->get($field_name)->value;

            // Round decimal fields to 2 places
            if (in_array($field_name, $decimal_fields)) {
              $value = round($value, 2);
            }

            $moreSettings[$variable_name] = $value;
          } else {
            $moreSettings[$variable_name] = null;
          }
        }

        $moreSettings["blockType"] = "fitness_metrics_page_block";

        $uuid = $variables['elements']['content']['react_block']['#uuid'];
        $settingsKey = 'rc-block-' . $uuid;

        // ugh this is ugly can't remember how this was set up if it can be made cleaner haha
        $finalSettings = array_merge($variables['content']['react_block']['#attached']['drupalSettings']['reactComponents'][$settingsKey], $moreSettings);

        $variables['content']['react_block']['#attached']['drupalSettings']['reactComponents'][$settingsKey] = $finalSettings;

      }
    }
  }
}

